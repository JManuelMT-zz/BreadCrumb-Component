{"version":3,"sources":["utils/transformList.js","components/BreadCrumb/BreadCrumb.js","App.js","services/breadCrumb.js","serviceWorker.js","index.js"],"names":["contentArr","transformList","data","tempObj","name","type","children","showFiles","prop","Object","keys","forEach","property","length","push","BreadCrumb","breadCrumb","showChildren","useState","fileName","setFileName","className","map","listItem","index","key","onClick","getChildren","filter","child","filterChild","App","breadCrumbList","setBreadCrumbList","setBreadCrumb","changeBreadCrumbList","list","useEffect","BreadCrumbList","Promise","resolve","then","response","currentIndex","tempBreadCrumb","breadCrumbWithFiles","breadCrudItem","newList","item","some","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d518f4c7.chunk.js","sourcesContent":["const contentArr = [];\nconst transformList = (data) => {\n    const tempObj = {\n        name: '',\n        type: '',\n        children: [],\n        showFiles: false,\n    };\n\n    for (let prop in data) {\n        if (prop === 'children') {\n            tempObj.children = [];\n            Object.keys(data[prop]).forEach((property) => {\n                if (contentArr.length > 0) {\n                    contentArr[contentArr.length - 1].children.push({\n                        name: property,\n                        type: data[prop][property].type,\n                    });\n                }\n                if (data[prop][property].type === 'dir') {\n                    tempObj.name = property;\n                    tempObj.type = data[prop][property].type;\n                    contentArr.push(tempObj);\n                    transformList(data[prop][property]);\n                }\n            })\n        }\n    }\n    return contentArr;\n}\n\nexport default transformList;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './breadCrumb.css';\n\nconst BreadCrumb = ({\n    breadCrumb,\n    showChildren,\n}) => {\n    const [fileName, setFileName] = useState('');\n\n    const getChildren = (children, index) => {\n        setFileName('');\n        showChildren(children, index);\n    }\n    const showFileName = (name) => {\n        setFileName(`THIS IS FILE ${name}`);\n    }\n  return (\n    <section className=\"bcContainer\">\n        {\n            breadCrumb.map((listItem, index) => (\n                <div className=\"breadCrumb\" key={index}>\n                    <div\n                        className=\"bcBox bcItem\"\n                        onClick={() => getChildren(listItem.children, index)}\n                    >\n                        {listItem.name} >\n                    </div>\n                    <div className=\"bcChildren\">\n                        {\n                            listItem.showFiles && (\n                                listItem.children\n                                .filter(child => child.type !== 'dir')\n                                    .map((filterChild, index) => (\n                                    <div\n                                        key={index}\n                                        className=\"bcBox\"\n                                        onClick={() => showFileName(filterChild.name)}\n                                    >\n                                        {filterChild.name}\n                                    </div>\n                                ))\n                            )\n                        }\n                    </div>\n                </div>\n            ))\n        }\n        <div className=\"bcFileText\">\n            {fileName}\n        </div>\n    </section>\n  );\n}\n\nBreadCrumb.propTypes = {\n    breadCrumb: PropTypes.arrayOf(PropTypes.shape()),\n    showChildren: PropTypes.func,\n  };\n\nexport default BreadCrumb;\n","import React, { useEffect, useState } from 'react';\nimport { getContents } from './services/breadCrumb';\nimport BreadCrumb from './components/BreadCrumb/BreadCrumb';\nimport BreadCrumbList from './constants/breadCrumbList.json';\n\nconst App = () => {\n  const [breadCrumbList, setBreadCrumbList] = useState([]);\n  const [breadCrumb, setBreadCrumb] = useState([]);\n\n  const changeBreadCrumbList = list => {\n    setBreadCrumb([...list]);\n  };\n\n  useEffect(() => {\n    getContents(BreadCrumbList)\n      .then((response) => {\n        setBreadCrumbList([...response]);\n        changeBreadCrumbList([response[0]]);\n      })\n  }, []);\n\n  const showChildren = (children, currentIndex) => {\n    const tempBreadCrumb = breadCrumb;\n    if (breadCrumb.length > (currentIndex + 1)) {\n      tempBreadCrumb.length = currentIndex + 1;\n      changeBreadCrumbList(tempBreadCrumb);\n    } else {\n      const breadCrumbWithFiles = tempBreadCrumb.map(breadCrudItem => (\n        {\n          ...breadCrudItem,\n          showFiles: true,\n        })\n      );\n  \n      children.forEach((child) => {\n          const newList = breadCrumbList.filter(item => item.name === child.name);\n          if (!breadCrumbWithFiles.some(list => list.name === child.name))  {\n            breadCrumbWithFiles.push(...newList);\n            changeBreadCrumbList(breadCrumbWithFiles);\n          }\n      });\n    }\n  };\n\n  return (\n    <div>\n      <BreadCrumb breadCrumb={breadCrumb} showChildren={showChildren} />\n    </div>\n  );\n}\n\nexport default App;\n","import transformList from '../utils/transformList';\n\nexport const getContents = (list) => (\n    new Promise((resolve) => {\n        resolve(transformList(list));\n    })\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}